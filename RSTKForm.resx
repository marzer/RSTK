<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="dlgBrowse.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="toolTip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>123, 11</value>
  </metadata>
  <data name="cbFullscreenMode.ToolTip" xml:space="preserve">
    <value>Windowed: Runs in a regular window.

WindowedFullscreen: Appears fullscreen, but does not gain exclusive use of the video device
(similar to the fullscreen method used by video players)

ExclusiveFullscreen: Fullscreen in exclusive mode.

Windowed modes can be helpful if you have multiple monitors and want Rocksmith 2014 to be
fullscreen on one monitor while maintaining regular use of the other monitors.</value>
  </data>
  <data name="checkEmulateFullscreen.ToolTip" xml:space="preserve">
    <value>Off (unless... see below).

On newer PC's (particularly those with Windows 10), Rocksmith appears to have
difficulty managing the device state changes when attempting to enter fullscreen mode,
variously causing system freezes, black screens, BSOD's, etc. RSTK's "Emulated Fullscreen"
is an alternative that can 'fake' fullscreen for you by stripping the window frames off of
the Rocksmith window and making it a Top-Most window. This process can only work
when Fullscreen mode is set to Windowed.

Major caveat, though: The size of the window will be exactly the size of the Resolution
setting, because Rocksmith doesn't respond well to having it's window resized much
beyond that. If you have a low-spec PC with a very high-resolution display, you may find
this leads to some serious performance issues.</value>
  </data>
  <data name="checkExclusiveMode.ToolTip" xml:space="preserve">
    <value>Recommended setting: On

Disable this if you want to have other audio programs running at the same time as Rocksmith 2014.
You may need to increase your Latency buffer setting to avoid audio issues if you choose to disable
Exclusive Mode. </value>
  </data>
  <data name="checkUltraLowLatencyMode.ToolTip" xml:space="preserve">
    <value>Recommended setting: On

Disable this if you’re having trouble getting the game to have good audio performance.
This will drop the game back to the original Rocksmith audio settings and may resolve
some audio crackling issues at the cost of some of the Rocksmith 2014 latency
improvements.</value>
  </data>
  <data name="trackLatencyBuffer.ToolTip" xml:space="preserve">
    <value>Recommended setting:
1 for a very powerful PC;
2 for a moderately powerful PC;
4 otherwise.

Determines the number of latency buffers Rocksmith uses in processing audio streams. The higher
the number, the longer they take to fill (and the more latency is introduced into the gameplay).

Going too high will lead to a severely diminished gameplay experience; going lower than what
your CPU speed and memory bandwidth are capable of handling will lead to audio artefacts
(clicks, pops, skipping, etc.).
</value>
  </data>
  <data name="trackMaxOutputBufferSize.ToolTip" xml:space="preserve">
    <value>Recommended setting:
100-150 for a very powerful PC;
250-400 for a moderately powerful PC;
0 otherwise (Rocksmith decides- typically defaults to 1024).

Determines the length of the sound device's output buffer; the larger the buffer, the
longer it takes to fill (and the more latency is introduced into the gameplay).

Going too high will lead to a severely diminished gameplay experience; going lower
than what your CPU speed and memory bandwidth are capable of handling will lead
to audio artefacts (clicks, pops, skipping, etc.).
</value>
  </data>
  <data name="lblEffectiveLatency.ToolTip" xml:space="preserve">
    <value>Recommended value: 20-60ms

Tweak Estimated Latency by adjusting the values for Latency buffer and Max output buffer size.
Going too high will lead to a severely diminished gameplay experience; going lower than what your
CPU speed and memory bandwidth are capable of handling will lead to audio artefacts
(clicks, pops, skipping, etc.).
</value>
  </data>
  <data name="checkDumpAudioLog.ToolTip" xml:space="preserve">
    <value>Recommended setting: Off

Enable this if you need to send debugging information to Ubisoft. It will create a text file called audiodump.txt,
located in the same directory as the Rocksmith application. Once you have run the game with this switched on
 be sure to switch it off again next time (leaving it enabled can degrade performance).</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>47</value>
  </metadata>
</root>